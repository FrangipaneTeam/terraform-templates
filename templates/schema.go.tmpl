package {{ .PackageName }}

import (
	"context"

	schemaD "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	schemaR "github.com/hashicorp/terraform-plugin-framework/resource/schema"

	superschema "github.com/FrangipaneTeam/terraform-plugin-framework-superschema"
)

// TODO : Remove unused imports.
// ! This is outside import block because golangci-lint remove commented import.
{{ template "importSchema" . }}

// How to use types generator:
// 1. Define the schema in the file internal/provider/{{ .CategoryName }}/{{ .SnakeName }}_schema.go
// 2. Add the resource or data source to the file internal/provider/provider_resources.go or internal/provider/provider_data_sources.go respectively
// 3. Launch the following command to generate golang structs for the schema:
// go run ./cmd/types-generator/*.go -file internal/provider/{{ .CategoryName }}/{{ .SnakeName }}_schema.go -resource cloudavenue_{{ .FullSnakeResourceName }} -is-resource
func {{ .LowerCamelName }}Schema(_ context.Context) superschema.Schema {
	return superschema.Schema{
		Resource: superschema.SchemaDetails{
			MarkdownDescription: "The `cloudavenue_{{ .FullSnakeResourceName }}` resource allows you to manage ...",
		},
		DataSource: superschema.SchemaDetails{
			MarkdownDescription: "The `cloudavenue_{{ .FullSnakeResourceName }}` data source allows you to retrieve information about an ...",
		},
		Attributes: map[string]superschema.Attribute{
			"id": superschema.SuperStringAttribute{
				Common: &schemaR.StringAttribute{
					Computed:            true,
					MarkdownDescription: "The ID of the {{ .SnakeName }}.",
				},
			},
			"name": superschema.SuperStringAttribute{
				Common: &schemaR.StringAttribute{
					MarkdownDescription: "The name of the {{ .SnakeName }}.",
				},
				Resource: &schemaR.StringAttribute{
					Required:             true,
				},
				DataSource: &schemaD.StringAttribute{
					Computed:             true,
				},
			},
			"single": superschema.SuperSingleNestedAttributeOf[struct{}]{ 
				Common: &schemaR.SingleNestedAttribute{
					MarkdownDescription: "The name of the index document.",
				},
				Resource: &schemaR.SingleNestedAttribute{
					Optional: true,
				},
				DataSource: &schemaD.SingleNestedAttribute{
					Computed: true,
				},
				Attributes: superschema.Attributes{},
			},
        },
    }
}